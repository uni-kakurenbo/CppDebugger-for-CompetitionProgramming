name: library-verification
run-name: ${{ github.workflow }} (${{ github.ref_name }})

on:
  workflow_dispatch:
  workflow_call:
    secrets:
      YUKICODER_TOKEN:
        required: false
      GH_PAT:
        required: true

concurrency:
  group: verify-${{ github.ref }}
  cancel-in-progress: true

jobs:
  set-up:
    runs-on: ${{ vars.RUNNER_IMAGE }}

    outputs:
      gen-ids: ${{ steps.node-ids.outputs.gen }}
      runner-ids: ${{ steps.node-ids.outputs.runner }}

    steps:
    - name: Git checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Node
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'

    - name: Install octokit
      run: npm install @octokit/core

    - name: Filter test files
      run: |
        set -eu

        N_PROC=$(nproc)

        if [ ! -f ./.verify-helper/timestamps.remote.json ]; then
          echo '{}' > ./.verify-helper/timestamps.remote.json
        fi

        echo -n > ./.verify-helper/problems.txt
        echo -n > ./.verify-helper/allocation.txt

        find verify -type f -name '*.test.cpp' | sort | \
        xargs -P ${N_PROC} -I {} bash ./.github/workflows/allocate.sh {}

        sort ./.verify-helper/problems.txt | uniq > ./.verify-helper/temp.txt
        cp ./.verify-helper/temp.txt ./.verify-helper/problems.txt

        N_PROBLEMS=$(cat ./.verify-helper/problems.txt | wc -l)
        N_TESTS=$(cat ./.verify-helper/allocation.txt | wc -l)

        echo "::group::${N_PROBLEMS} problems appeared:"
          cat ./.verify-helper/problems.txt
        echo "::endgroup::"
        echo

        echo "::group::${N_TESTS} test files allocated:"
          cat ./.verify-helper/allocation.txt
        echo "::endgroup::"
        echo

    - name: Filter uncached
      uses: actions/github-script@v7
      with:
        script: |
          const problem_list = "${{ github.workspace }}/.verify-helper/problems.txt";

          const fs = require('fs');
          const crypto = require('crypto');
          const { Octokit } = require("@octokit/core");

          const octokit = new Octokit({
            auth: '${{ github.token }}'
          });

          saved_caches = await octokit.request(
            'GET /repos/${{ github.repository }}/actions/caches',
            {
              per_page: 100,
              ref: '${{ github.ref }}',
              key: 'testcase-',
              sort: 'last_accessed_at',
              headers: { 'X-GitHub-Api-Version': '2022-11-28' }
            });

          cached_keys = new Set(saved_caches.data.actions_caches.map(({ key }) => key ));
          console.log(cached_keys);

          uncached = ""

          const count = fs.readFileSync(problem_list).toString().split('\n')
            .map((name) => {
              const hash = crypto.createHash('md5').update(name).digest('hex');
              return { name, hash };
            })
            .filter(({ name, hash }) => {
              return !!name && !cached_keys.has(`testcase-${ hash }`);
            })
            .map(({ name, hash }) => {
              uncached+=`${ name } ${ hash }\n`;
            })
            .length;

          console.log(`::group::${ count } uncached problems filtered:`);
          console.log(uncached);
          console.log("::endgroup::");

          fs.writeFileSync(problem_list, uncached);

    - name: Generate node ids
      working-directory: .verify-helper/
      id: node-ids
      run: |
        set -eu

        N_PROBLEMS=$(cat ./problems.txt | wc -l)
        N_TESTS=$(cat ./allocation.txt | wc -l)

        if [ ${N_PROBLEMS} -gt 18 ]; then
          N_PROBLEMS=18
        fi

        if [ ${N_TESTS} -gt 18 ]; then
          N_TESTS=18
        fi

        echo "Generator: ${N_PROBLEMS} nodes."
        echo "Runner: ${N_TESTS} nodes."

        GEN_IDS='['
        for ((i=0; i < N_PROBLEMS; i++)); do
            GEN_IDS+=$(printf '"%02d"' "${i}")
            if [ $i -lt $((N_PROBLEMS-1)) ]; then
                GEN_IDS+=','
            fi
        done
        GEN_IDS+=']'

        RUN_IDS='['
        for ((i=0; i < N_TESTS; i++)); do
            RUN_IDS+=$(printf '"%02d"' "${i}")
            if [ $i -lt $((N_TESTS-1)) ]; then
                RUN_IDS+=','
            fi
        done
        RUN_IDS+=']'

        echo "gen=$(echo "${GEN_IDS}" | jq -c)" >> ${GITHUB_OUTPUT}
        echo "runner=$(echo "${RUN_IDS}" | jq -c)" >> ${GITHUB_OUTPUT}

    - name: Save meta data
      uses: actions/upload-artifact@v3
      with:
        name: meta-info
        path: |
          ./.verify-helper/problems.txt
          ./.verify-helper/allocation.txt
        retention-days: 1

  gen-cases:
    runs-on: ${{ vars.RUNNER_IMAGE }}
    needs: set-up
    if: ${{ needs.set-up.outputs.gen-ids != '[]' }}

    strategy:
      fail-fast: false
      matrix:
        id: ${{ fromJSON(needs.set-up.outputs.gen-ids) }}

    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12.0

    - name: Set up Node
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'

    - name: Install oj-verify
      run: pip3 install -U online-judge-verify-helper

    - name: Install action modules
      run: npm install @actions/cache

    - name: Load meta data
      uses: actions/download-artifact@v3
      with:
        name: meta-info
        path: ./

    - name: Filter problems
      run: |
        PROBLEMS=$(
          cat ./problems.txt | \
          sort | \
          awk -v n=${{ strategy.job-total }} \
              -v i=${{ strategy.job-index }} \
              '{
                if((NR - 1) % n == i) {
                  print $0
                }
              }' \
          )

        echo -n ${PROBLEMS} > ./targets.txt
        cat ./targets.txt

    - name: Generate testcases
      env:
        YUKICODER_TOKEN: ${{ secrets.YUKICODER_TOKEN }}
      run: |
        mkdir ./testcases/
        cat ./targets.txt

        echo '::group::oj download prepare'
        oj download --system https://judge.yosupo.jp/problem/aplusb
        echo '::endgroup::'

        function gen() {
          local problem="$1"
          local hash="$2"
          local pid="$$"

          mkdir -p "./testcases/${hash}"; cd "./testcases/${hash}"
          {
            echo "::group::${problem} [hash: ${hash}]"
            oj download --system --silent "${problem}"
            echo '::endgroup::'
          } &> "../../log-${pid}.txt"
          cat "../../log-${pid}.txt"
        }
        export -f gen

        head -c -1 ./targets.txt | \
        xargs -P $(nproc) -d '\n' -I {} bash -c 'gen {}'

    - name: Cache judge data
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const cache = require('@actions/cache');

          const basedir = `${{ github.workspace }}/testcases/`;

          fs.readdir(`${ basedir }`, (err, dirs) => {
              if(err) console.error(err);

              console.log(dirs);

              Promise.all(
                dirs.map((dir) => {
                  console.log("Save: ", dir);
                  return cache.saveCache([ `${ basedir }${ dir }/` ], `testcase-${ dir }`);
                })
              ).then(() => {
                process.exit(0);
              }).catch((e) => {
                console.error(e);
                process.exit(0);
              });
          });

  run:
    runs-on: ${{ vars.RUNNER_IMAGE }}
    needs:
      - set-up
      - gen-cases
    if: ${{ needs.set-up.outputs.RUN_IDS != '[]' }}

    strategy:
      fail-fast: false
      matrix:
        id: ${{ fromJSON(needs.set-up.outputs.runner-ids) }}

    steps:
    - name: Git checkout
      uses: actions/checkout@v3
      with:
        path: main
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12.0

    - name: Install oj-verify
      run: pip3 install -U online-judge-verify-helper

    - name: Clone AC-Library
      uses: actions/checkout@v3
      with:
        repository: atcoder/ac-library
        path: ac-library
        sparse-checkout: atcoder

    - name: Load meta data
      uses: actions/download-artifact@v3
      with:
        name: meta-info
        path: ./main/.verify-helper/

    - name: Allocate test files
      working-directory: main
      run: |
        TEST_FILES=$(
          cat ./.verify-helper/allocation.txt  | \
          sort | \
          awk -v n=${{ strategy.job-total }} \
              -v i=${{ strategy.job-index }} \
              '{
                if((NR - 1) % n == i) {
                  print $0
                }
              }' \
          )

        echo ${TEST_FILES} > .verify-helper/targets.txt
        cat .verify-helper/targets.txt

    # - name: Cache judge data
    #   if: ${{ !cancelled() && github.ref_name == github.event.repository.default_branch }}
    #   id: runnner-cache
    #   uses: actions/cache@v3
    #   with:
    #     path: |
    #       ~/.cache/online-judge-tools/library-checker-problems/
    #       main/.verify-helper/cache/
    #     key: verify-${{ hashFiles('main/verify/**/*.test.cpp', 'main/.verify-helper/targets.txt') }}

    - name: Run tests
      working-directory: main
      env:
        # CACHE_HIT: ${{ steps.runnner-cache.outputs.cache-hit }}
        CPLUS_INCLUDE_PATH: ${{ github.workspace }}/ac-library
        YUKICODER_TOKEN: ${{ secrets.YUKICODER_TOKEN }}
      run: |
        set -eu

        echo '{}' > ./.verify-helper/timestamps.json

        {
          # if [ ! -f ./.verify-helper/timestamps.remote.json ] || [ "${CACHE_HIT}" != 'true' ]; then
          if [ ! -f ./.verify-helper/timestamps.remote.json ]; then
            echo '{}' > ./.verify-helper/timestamps.remote.json
          fi

          sed -i '/^$/d' ./.verify-helper/timestamps.remote.json

          if -s ./.verify-helper/timestamps.remote.json; then
            echo '{}' >> ./.verify-helper/timestamps.remote.json
          fi
        }

        echo '::group::oj download prepare'
        oj download --system https://judge.yosupo.jp/problem/aplusb
        echo '::endgroup::'

        PARALLEL=$(nproc)
        echo "Parallel execution: ${PARALLEL}"

        head -c -1 ./.verify-helper/targets.txt | \
        xargs -P ${PARALLEL} -d ' ' -I {} bash ./.github/workflows/run-test.sh {}

        jq --slurp --sort-keys 'reduce .[] as $item ({}; . * $item)' \
        ./.verify-helper/timestamps.json > ./.verify-helper/temp.json

        cp -f ./.verify-helper/temp.json ./.verify-helper/timestamps.json

    - name: Save timestamps
      uses: actions/upload-artifact@v3
      if: ${{ !cancelled() }}
      with:
        name: test-${{ matrix.id }}
        path: main/.verify-helper/timestamps.json
        retention-days: 1

  post-run:
    runs-on: ${{ vars.RUNNER_IMAGE }}
    needs: run
    if: ${{ !cancelled() && github.ref_name == github.event.repository.default_branch }}

    steps:
    - name: Git checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        sparse-checkout: .verify-helper

    - name: Load timestamps
      uses: actions/download-artifact@v3
      with:
        # pattern: test-*
        path: .verify-helper/tests/

    - name: Merge timestamps
      working-directory: .verify-helper
      run: |
        touch ./timestamps.remote.json

        if ! ls ./tests/test-*/timestamps.json > /dev/null 2>&1; then
          echo "No timestamps found."
          exit 0
        fi

        jq --slurp --sort-keys 'reduce .[] as $item ({}; . * $item)' \
        ./timestamps.remote.json ./tests/test-*/timestamps.json > ./merged-timestamps.json

        cp -f ./merged-timestamps.json ./timestamps.remote.json
        cat ./timestamps.remote.json

    - name: Push merged timestamps
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git remote set-url origin https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}

        git config --global user.name "GitHub"
        git config --global user.email "noreply@github.com"

        git add .verify-helper/timestamps.remote.json

        if (git diff --cached --shortstat | grep '[0-9]'); then
          git commit -m "[auto-verifier] verify commit ${GITHUB_SHA}"
          git pull --rebase
          git push origin HEAD:${GITHUB_REF}
        else
          echo "No timestamps updated."
        fi
