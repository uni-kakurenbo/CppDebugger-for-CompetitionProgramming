/*
 * @uni_kakurenbo
 * https://github.com/uni-kakurenbo/competitive-programming-workspace
 *
 * CC0 1.0  http://creativecommons.org/publicdomain/zero/1.0/deed.ja
 */
/* #language C++ 20 GCC */

#define PROBLEM "https://atcoder.jp/contests/abc237/tasks/abc237_ex"

#include <iostream>
#include "snippet/aliases.hpp"
#include "snippet/fast_io.hpp"
#include "snippet/iterations.hpp"
#include "adaptor/io.hpp"
#include "adaptor/string.hpp"
#include "adaptor/vector.hpp"
#include "structure/graph.hpp"
#include "graph/minimum_paph_cover.hpp"

signed main() {
    uni::string s; std::cin >> s;
    uni::i32 n = s.size();

    uni::vector<uni::string> sub;
    REP(i, n) FOR(j, n) {
        uni::string t = s.substr(i, j);
        uni::string u = t;
        u.reverse();
        if(t != u) continue;
        sub.push_back(t);
    }
    sub.unique();

    uni::i32 m = sub.size();
    uni::graph G(m);
    REP(i, m) REP(j, m) {
        if(i != j and sub[i].find(sub[j]) != uni::string::npos) {
            G.add_edge(i, j);
        }
    }

    print(G.minimum_paph_cover_size_as_dag());
}
